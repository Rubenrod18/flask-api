import logging
from datetime import datetime

from flask_script import Manager
from peewee import *
from dotenv import load_dotenv

from app import create_app
from app.models import *

# Import environment file variables
load_dotenv()

# Log configuration
log_dirname = 'log/'
log_filename = '{}.log'.format(datetime.utcnow().strftime('%Y%m%d'))
log_fullpath = '{}{}'.format(log_dirname, log_filename)

if not os.path.exists(log_dirname):
    os.mkdir(log_dirname)

FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=log_fullpath, format=FORMAT, level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Database
dbname = '%s.db' % os.getenv('DATABASE_NAME', 'prod.db')
database = SqliteDatabase(dbname)

# App
app = create_app(os.getenv('FLASK_CONFIG', 'config.ProdConfig'))
manager = Manager(app)


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    database.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not database.is_closed():
        database.close()


@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')
    response.headers.add('Cache-Control', 'no-cache')
    return response


if __name__ == '__main__':
    manager.run()
